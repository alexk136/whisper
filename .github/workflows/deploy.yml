name: Deploy Whisper Microservice

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # –ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å –≤—Ä—É—á–Ω—É—é

env:
  DOCKER_COMPOSE_FILE: docker-compose.yml

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio pyyaml

      - name: Run tests
        run: |
          python -m pytest tests/ -v --tb=short

  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Server
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.CI_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            echo "üöÄ Starting deployment..."
            
            # Navigate to project directory
            cd ${{ secrets.PROJECT_PATH || '/home/user/whisper' }}
            
            # Backup current state (optional)
            echo "üì¶ Creating backup..."
            docker-compose logs --tail=100 > logs/deployment-$(date +%Y%m%d_%H%M%S).log || true
            
            # Pull latest changes
            echo "üì• Pulling latest code..."
            git fetch origin
            git reset --hard origin/main
            
            # Pull latest Docker images
            echo "üê≥ Pulling Docker images..."
            docker-compose pull
            
            # Restart services with zero downtime
            echo "üîÑ Restarting services..."
            docker-compose up -d --remove-orphans --force-recreate
            
            # Wait for services to be healthy
            echo "üè• Checking service health..."
            sleep 10
            docker-compose ps
            
            # Clean up old images and containers
            echo "üßπ Cleaning up..."
            docker image prune -f
            docker container prune -f
            
            echo "‚úÖ Deployment completed successfully!"

  notify:
    runs-on: ubuntu-latest
    name: Notify Deployment Status
    needs: [test, deploy]
    if: always()
    
    steps:
      - name: Notify Success
        if: needs.deploy.result == 'success'
        run: |
          echo "‚úÖ Deployment successful!"
          # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Slack, Telegram, email –∏ —Ç.–¥.
          
      - name: Notify Failure
        if: needs.deploy.result == 'failure' || needs.test.result == 'failure'
        run: |
          echo "‚ùå Deployment failed!"
          # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
