name: Pull Request Tests

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

jobs:
  pr-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov requests pyyaml black isort

      - name: Run linting
        run: |
          echo "🔍 Checking code formatting..."
          black --check . || (echo "❌ Code formatting issues found. Run 'black .' to fix." && exit 1)
          isort --check-only . || (echo "❌ Import sorting issues found. Run 'isort .' to fix." && exit 1)

      - name: Run tests
        run: |
          echo "🧪 Running tests..."
          python -m pytest tests/ -v --tb=short

      - name: Test Docker build
        run: |
          echo "🐳 Testing Docker build..."
          docker build -t whisper-test:pr-${{ github.event.number }} .

      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('🤖 PR Tests Status')
            );
            
            const body = `🤖 PR Tests Status
            
            ✅ Code formatting check passed
            ✅ Tests completed
            ✅ Docker build successful
            
            Ready for review! 🚀`;
            
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }
